// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Error functions.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Raw error.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T = DEF_t> struct RawErr_fn
	{
		constexpr static inline T err ( const int _Size, const T* _Real, const T* _Predicted )
		{ 
			return std::transform_reduce
			(
				_Predicted,
				_Predicted + _Size,
				_Real,
				T(0),
				[&]( T _Sum, T _Item ) { return _Sum + _Item; },
				[&]( T _P, T _R ) { return (_P - _R); }
			) / _Size;
		}
		

		constexpr static inline T der ( const T _Real, const T _Predicted )
		{
			return _Predicted - _Real;
		}
	};
	

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Mean squared error.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T = DEF_t> struct MseErr_fn
	{
		constexpr static inline T err ( const int _Size, const T* _Real, const T* _Predicted )
		{ 
			return std::transform_reduce
			(
				_Predicted,
				_Predicted + _Size,
				_Real,
				T(0),
				[&]( T _Sum, T _Item ) { return _Sum + _Item; },
				[&]( T _P, T _R ) { return (_P - _R)*(_P - _R); }
			) / _Size;
		}
		

		constexpr static inline T der ( const T _Real, const T _Predicted )
		{
			return (_Predicted - _Real) * T(2);
		}
	};


	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Mean absolute error.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T = DEF_t> struct MaeErr_fn
	{
		constexpr static inline T err ( const int _Size, const T* _Real, const T* _Predicted )
		{ 
			return std::transform_reduce
			(
				_Predicted,
				_Predicted + _Size,
				_Real,
				T(0),
				[&]( T _Sum, T _Item ) { return _Sum + _Item; },
				[&]( T _P, T _R ) { return std::abs(_P - _R); }
			) / _Size;
		}
		

		constexpr static inline T der ( const T _Real, const T _Predicted )
		{
			return ((_Predicted - _Real) / std::max(std::abs(_Predicted - _Real), T(1e-15)));
		}
	};
}
