// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Neural Networks Experiment.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Error function options.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	enum class FnErr
	{
		MSE
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Calculate error.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T, FnErr FN_ERR> constexpr inline auto error ( const uMAX _Size, const T* _Real, const T* _Predicted )
	{
		if constexpr(FN_ERR == FnErr::MSE)
		{
			auto Sum = T(0.0);
			for(auto i = uMAX(0); i < _Size; ++i) Sum += math::sqr(_Predicted[i] - _Real[i]);
			return Sum / _Size;
		}
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Error derivitive.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T, FnErr FN_ERR> constexpr inline auto errorDer (const T _Real, const T _Predicted)
	{
		if constexpr(FN_ERR == FnErr::MSE) return (_Predicted - _Real) * 2;
	}
}
