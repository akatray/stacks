// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Link.hpp"


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace ai
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// 
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<int SIZE, class FN_ERR> class OpError : public Link
	{
		private:

		float Gradient[SIZE];

		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		AI_SIG_LINK_EXE
		{
			//this->Front =
		}
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		AI_SIG_LINK_FIT
		{
			for(auto o = uMAX(0); o < SIZE; ++o) this->Gradient[o] = FN_ERR::der(_Target[o], this->Back)

		}
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		AI_SIG_LINK_APP
		{
			if(this->Front) this->Front->apply(_Rate);
		}
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		AI_SIG_LINK_RES
		{
			if(this->Front) this->Front->reset();
		}
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	};

}