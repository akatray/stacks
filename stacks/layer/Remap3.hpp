// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Neural Networks Experiment.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	enum class AXIS
	{
		X,
		Y,
		Z
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Convolutional layer 2d.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template
	<
		class T,
		uMAX WIDTH_IN,
		uMAX HEIGHT_IN,
		uMAX DEPTH_IN,
		AXIS NEW_X,
		AXIS NEW_Y,
		AXIS NEW_Z
	>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Remap3 :
		public Layer<T>
		//LDWeights<T, FnOptim::NONE, 8, 8, FnInitWeights::DEFAULT>,
		//LDBiases<T, 8, 8, 8, FnOptim::NONE>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Compile time constants.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr static auto SZ_IN = WIDTH_IN * HEIGHT_IN * DEPTH_IN;
		constexpr static auto SZ_OUT = SZ_IN;
		

		alignas(ALIGNMENT) T Output[SZ_OUT];
		alignas(ALIGNMENT) T Gradient[SZ_IN];

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Generated functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_MC_LAYER_TRIVIAL(Remap3, SZ_OUT, this->Output, this->Gradient)


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_EXE final
		{
			uMAX x = 0;
			uMAX y = 0;
			uMAX z = 0;

			uMAX* nx = nullptr;
			uMAX* ny = nullptr;
			uMAX* nz = nullptr;

			uMAX szx = 0;
			uMAX szy = 0;
			uMAX szz = 0;


			if constexpr(NEW_X == AXIS::X){ nx = &x; szx = WIDTH_IN;}
			if constexpr(NEW_X == AXIS::Y){ nx = &y; szx = HEIGHT_IN;}
			if constexpr(NEW_X == AXIS::Z){ nx = &z; szx = DEPTH_IN;}

			if constexpr(NEW_Y == AXIS::X){ ny = &x; szy = WIDTH_IN;}
			if constexpr(NEW_Y == AXIS::Y){ ny = &y; szy = HEIGHT_IN;}
			if constexpr(NEW_Y == AXIS::Z){ ny = &z; szy = DEPTH_IN;}

			if constexpr(NEW_Z == AXIS::X){ nz = &x; szz = WIDTH_IN;}
			if constexpr(NEW_Z == AXIS::Y){ nz = &y; szz = HEIGHT_IN;}
			if constexpr(NEW_Z == AXIS::Z){ nz = &z; szz = DEPTH_IN;}


			for(; z < DEPTH_IN; ++z) 
			{
				for(; y < HEIGHT_IN; ++y) 
				{
					for(; x < WIDTH_IN; ++x)
					{
						const auto o = math::index_c(*nx, *ny, *nz, szx, szy);
						const auto i = math::index_c(x, y, z, WIDTH_IN, HEIGHT_IN);
				
						this->Output[o] = this->Input[i];

					}

					x = 0;
				}

				y = 0;
			}


			SX_MC_LAYER_NEXT_EXE;
		}


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Backpropagate. Optimized for memory order.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_FIT final
		{
			uMAX x = 0;
			uMAX y = 0;
			uMAX z = 0;

			uMAX* nx = nullptr;
			uMAX* ny = nullptr;
			uMAX* nz = nullptr;

			uMAX szx = 0;
			uMAX szy = 0;
			uMAX szz = 0;


			if constexpr(NEW_X == AXIS::X){ nx = &x; szx = WIDTH_IN;}
			if constexpr(NEW_X == AXIS::Y){ nx = &y; szx = HEIGHT_IN;}
			if constexpr(NEW_X == AXIS::Z){ nx = &z; szx = DEPTH_IN;}

			if constexpr(NEW_Y == AXIS::X){ ny = &x; szy = WIDTH_IN;}
			if constexpr(NEW_Y == AXIS::Y){ ny = &y; szy = HEIGHT_IN;}
			if constexpr(NEW_Y == AXIS::Z){ ny = &z; szy = DEPTH_IN;}

			if constexpr(NEW_Z == AXIS::X){ nz = &x; szz = WIDTH_IN;}
			if constexpr(NEW_Z == AXIS::Y){ nz = &y; szz = HEIGHT_IN;}
			if constexpr(NEW_Z == AXIS::Z){ nz = &z; szz = DEPTH_IN;}

			auto Gr = this->Front->gradient();

			for(; z < DEPTH_IN; ++z) 
			{
				for(; y < HEIGHT_IN; ++y) 
				{
					for(; x < WIDTH_IN; ++x)
					{
						const auto o = math::index_c(*nx, *ny, *nz, szx, szy);
						const auto i = math::index_c(x, y, z, WIDTH_IN, HEIGHT_IN);
				
						this->Gradient[i] = Gr[o];

					}

					x = 0;
				}

				y = 0;
			}


			SX_MC_LAYER_NEXT_FIT;
		}


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get output error in respect to argument.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplErr.hpp"


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Reset delta parameters.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_RESET final
		{
			SX_MC_LAYER_NEXT_RESET;
		}


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Apply optimizations and update parameters.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_APPLY final
		{
			SX_MC_LAYER_NEXT_APPLY;
		}


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Store parameters to stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_STORE final
		{
			SX_MC_LAYER_NEXT_STORE;
		}


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Load parameters from stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_LOAD final
		{
			SX_MC_LAYER_NEXT_LOAD;
		}


		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Multi threading utility.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplExchangeSkip.hpp"
	};
}
