// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./../Layer.hpp"

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Neural Networks Experiment.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Depthwise convolution 2d.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template
	<
		class T,
		uMAX WIDTH_IN,
		uMAX HEIGHT_IN,
		uMAX DEPTH_IN,
		uMAX DEPTH_OUT,
		FnTrans FN_TRANS = FnTrans::RELU,
		FnInitWeights FN_INIT_W = sx::FnInitWeights::NRM_RELU,
		FnOptim FN_OPTIM = FnOptim::ADAM,
		FnErr FN_ERR = FnErr::MSE
	>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Conv2Depth :
		public Layer<T>,
		LDOutputs<T, WIDTH_IN*HEIGHT_IN, WIDTH_IN*HEIGHT_IN*DEPTH_IN, true>,
		LDWeights<T, FN_OPTIM, DEPTH_IN*DEPTH_OUT, WIDTH_IN*HEIGHT_IN*DEPTH_IN, WIDTH_IN*HEIGHT_IN*DEPTH_OUT, FN_INIT_W>,
		LDBiases<T, WIDTH_IN*HEIGHT_IN*DEPTH_OUT, 0, 0, needBufM<T,FN_OPTIM>(), needBufV<T,FN_OPTIM>()>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Compile time constants.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr static auto SZ_IN = WIDTH_IN * HEIGHT_IN * DEPTH_IN;
		constexpr static auto SZ_OUT = WIDTH_IN * HEIGHT_IN * DEPTH_OUT;
		constexpr static auto SZ_BUF_W = DEPTH_IN * DEPTH_OUT;
		constexpr static auto SZ_BUF_B = SZ_OUT;
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Generated functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_MC_LAYER_TRIVIAL(Conv2Depth, SZ_OUT, this->OutTrans, this->Gradient)

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_EXE final
		{
			memZero(SZ_OUT, this->OutRaw);
			
			for(auto od = uMAX(0); od < DEPTH_OUT; ++od) { for(auto y = uMAX(0); y < HEIGHT_IN; ++y) { for(auto x = uMAX(0); x < WIDTH_IN; ++x)
			{
				const auto o = math::index_c(x, y, od, WIDTH_IN, HEIGHT_IN);
				for(auto id = uMAX(0); id < DEPTH_IN; ++id)
				{
					const auto i = math::index_c(x, y, id, WIDTH_IN, HEIGHT_IN);
					const auto w = math::index_c(id, od, DEPTH_IN);

					this->OutRaw[o] += this->Input[i] * this->Weights[w];
				}

				this->OutTrans[o] = transfer<T,FN_TRANS>(this->OutRaw[o] + this->Biases[o]);
			}}}

			SX_MC_LAYER_NEXT_EXE;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Backpropagate.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_FIT final
		{
			memZero(SZ_IN, this->Gradient);

			for(auto od = uMAX(0); od < DEPTH_OUT; ++od) { for(auto y = uMAX(0); y < HEIGHT_IN; ++y) { for(auto x = uMAX(0); x < WIDTH_IN; ++x)
			{
				const auto o = math::index_c(x, y, od, WIDTH_IN, HEIGHT_IN);
				SX_MC_LAYER_DER_ERR;
				SX_MC_LAYER_DER_TRANS;
				for(auto id = uMAX(0); id < DEPTH_IN; ++id)
				{
					const auto i = math::index_c(x, y, id, WIDTH_IN, HEIGHT_IN);
					const auto w = math::index_c(id, od, DEPTH_IN);

					this->WeightsDlt[w] += this->Input[i] * DerTrans;
					this->Gradient[i] += this->Weights[w] * DerTrans;
				}

				this->BiasesDlt[o] += DerTrans;
			}}}

			SX_MC_LAYER_NEXT_FIT;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get output error in respect to argument.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplErr.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Reset delta parameters.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplReset.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Apply optimizations and update parameters.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplApply.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Store parameters to stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplStore.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Load parameters from stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplLoad.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Multi threading utility.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplExchange.hpp"
	};
}
