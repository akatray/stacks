// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./../Layer.hpp"

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Neural Networks Experiment.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Convolutional layer 2d. Weighted reduce.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template
	<
		class T,
		uMAX WIDTH_IN,
		uMAX HEIGHT_IN,
		uMAX DEPTH_IN,
		FnTrans FN_TRANS = FnTrans::RELU,
		FnInitWeights FN_INIT_W = sx::FnInitWeights::NRM_RELU,
		FnOptim FN_OPTIM = FnOptim::ADAM
	>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Conv2Reduce :
		public Layer<T>,
		LDOutputs<T, WIDTH_IN*HEIGHT_IN, WIDTH_IN*HEIGHT_IN*DEPTH_IN, true>,
		LDWeights<T, FN_OPTIM, DEPTH_IN, WIDTH_IN*HEIGHT_IN*DEPTH_IN, WIDTH_IN*HEIGHT_IN, FN_INIT_W>,
		LDBiases<T, WIDTH_IN*HEIGHT_IN, 0, 0, needBufM<T,FN_OPTIM>(), needBufV<T,FN_OPTIM>()>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Compile time constants.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr static auto SZ_IN = WIDTH_IN * HEIGHT_IN * DEPTH_IN;
		constexpr static auto SZ_OUT = WIDTH_IN * HEIGHT_IN;
		constexpr static auto SZ_BUF_W = DEPTH_IN;
		constexpr static auto SZ_BUF_B = SZ_OUT;

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Generated functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_MC_LAYER_TRIVIAL(Conv2Reduce, SZ_OUT, this->OutTrans, this->Gradient)

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_EXE final
		{
			memZero(SZ_OUT, this->OutRaw);

			for(auto d = uMAX(0); d < DEPTH_IN; ++d) { for(auto y = uMAX(0); y < HEIGHT_IN; ++y)
			{
				const auto o = math::index_c(0, y, WIDTH_IN);
				const auto i = math::index_c(0, y, d, WIDTH_IN, HEIGHT_IN);
				for(auto x = uMAX(0); x < WIDTH_IN; ++x)
				{
					this->OutRaw[o+x] += this->Input[i+x] * this->Weights[d];
				}
			}}

			for(auto o = uMAX(0); o < SZ_OUT; ++o)
			{
				this->OutRaw[o] += this->Biases[o];
				this->OutTrans[o] = transfer<T,FN_TRANS>(this->OutRaw[o]);
			}

			SX_MC_LAYER_NEXT_EXE;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Backpropagate.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_FIT final
		{
			if(this->Front)
			{
				memZero(SZ_IN, this->Gradient);

				auto PtrFrontGrad = this->Front->gradient();
				auto PtrOutput = this->OutTrans;
				if constexpr(needRaw<T,FN_TRANS>()) PtrOutput = this->OutRaw;

				alignas(ALIGNMENT) T Der[WIDTH_IN*HEIGHT_IN];
				for(auto o = uMAX(0); o < SZ_OUT; ++o) Der[o] = std::clamp(transferDer<T,FN_TRANS>(PtrOutput[o]) * PtrFrontGrad[o], T(-1), T(1));

				for(auto d = uMAX(0); d < DEPTH_IN; ++d) { for(auto y = uMAX(0); y < HEIGHT_IN; ++y)
				{
					const auto o = math::index_c(0, y, WIDTH_IN);
					const auto i = math::index_c(0, y, d, WIDTH_IN, HEIGHT_IN);
					for(auto x = uMAX(0); x < WIDTH_IN; ++x)
					{
						const auto ox = o+x;
						const auto ix = i+x;
						this->WeightsDlt[d] += this->Input[ix] * Der[ox];
						this->Gradient[ix] += this->Weights[d] * Der[ox];
					}
				}}
			}

			else throw fx::Error("sx"s, "Conv2Reduce"s, "fit"s, 0, "Can't be last layer!"s);

			SX_MC_LAYER_NEXT_FIT;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Reset delta parameters.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplReset.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Apply optimizations and update parameters.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplApply.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Store parameters to stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplStore.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Load parameters from stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplLoad.hpp"

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Multi threading utility.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplExchange.hpp"
	};
}
