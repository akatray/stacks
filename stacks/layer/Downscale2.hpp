// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./../Layer.hpp"

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Neural Networks Experiment.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Downscale layer 2d.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template
	<
		class T,
		uMAX WIDTH_IN,
		uMAX HEIGHT_IN,
		uMAX DEPTH_IN,
		FnErr FN_ERR = FnErr::MSE
	>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Downscale2 :
		public Layer<T>,
		LDOutputs<T, (WIDTH_IN / 2) * (HEIGHT_IN / 2) * DEPTH_IN, WIDTH_IN * HEIGHT_IN * DEPTH_IN, false>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Compile time constants.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr static auto WIDTH_OUT = WIDTH_IN / 2;
		constexpr static auto HEIGHT_OUT = HEIGHT_IN / 2;
		constexpr static auto SZ_IN = WIDTH_IN * HEIGHT_IN * DEPTH_IN;
		constexpr static auto SZ_OUT = WIDTH_OUT * HEIGHT_OUT * DEPTH_IN;
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Generated functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_MC_LAYER_TRIVIAL(Downscale2, SZ_OUT, this->OutTrans, this->Gradient)

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute layer.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_EXE final
		{
			auto ox = uMAX(0);
			auto oy = uMAX(0);

			for(auto iy = uMAX(0); iy < HEIGHT_IN; iy += uMAX(2)) { for(auto ix = uMAX(0); ix < WIDTH_IN; ix += uMAX(2))
			{
				for(auto d = uMAX(0); d < DEPTH_IN; ++d)
				{
					auto Sum = T(0);

					Sum += this->Input[math::index_c(ix, iy, d, WIDTH_IN, HEIGHT_IN)];
					Sum += this->Input[math::index_c(ix + uMAX(1), iy, d, WIDTH_IN, HEIGHT_IN)];
					Sum += this->Input[math::index_c(ix, iy + uMAX(1), d, WIDTH_IN, HEIGHT_IN)];
					Sum += this->Input[math::index_c(ix + uMAX(1), iy + uMAX(1), d, WIDTH_IN, HEIGHT_IN)];

					this->OutTrans[math::index_c(ox, oy, d, WIDTH_OUT, HEIGHT_OUT)] = Sum;
				}

				++ox; if(ox >= WIDTH_OUT) { ox = uMAX(0); ++oy; }
			}}

			SX_MC_LAYER_NEXT_EXE;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Backpropagate.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_FIT final
		{
			auto ox = uMAX(0);
			auto oy = uMAX(0);

			for(auto iy = uMAX(0); iy < HEIGHT_IN; iy += uMAX(2)) { for(auto ix = uMAX(0); ix < WIDTH_IN; ix += uMAX(2))
			{
				for(auto d = uMAX(0); d < DEPTH_IN; ++d)
				{
					const auto o = math::index_c(ox, oy, d, WIDTH_OUT, HEIGHT_OUT);
					
					SX_MC_LAYER_DER_ERR;

					this->Gradient[math::index_c(ix, iy, d, WIDTH_IN, HEIGHT_IN)] = DerErr;
					this->Gradient[math::index_c(ix + uMAX(1), iy, d, WIDTH_IN, HEIGHT_IN)] = DerErr;
					this->Gradient[math::index_c(ix, iy + uMAX(1), d, WIDTH_IN, HEIGHT_IN)] = DerErr;
					this->Gradient[math::index_c(ix + uMAX(1), iy + uMAX(1), d, WIDTH_IN, HEIGHT_IN)] = DerErr;
				}

				++ox; if(ox >= WIDTH_OUT) { ox = uMAX(0); ++oy; }
			}}

			SX_MC_LAYER_NEXT_FIT;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get error between target and output.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplErr.hpp"
	};
}
