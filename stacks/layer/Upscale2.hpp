// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./../Layer.hpp"

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Neural Networks Experiment.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Upscale layer 2d.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template
	<
		class T,
		uMAX WIDTH_IN,
		uMAX HEIGHT_IN,
		uMAX DEPTH_IN
	>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Upscale2 :
		public Layer<T>,
		Outputs_ld<T, (WIDTH_IN*2)*(HEIGHT_IN*2)*DEPTH_IN, WIDTH_IN*HEIGHT_IN*DEPTH_IN>
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Compile time constants.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr static auto WIDTH_OUT = WIDTH_IN * 2;
		constexpr static auto HEIGHT_OUT = HEIGHT_IN * 2;
		constexpr static auto SZ_IN = WIDTH_IN * HEIGHT_IN * DEPTH_IN;
		constexpr static auto SZ_OUT = WIDTH_OUT * HEIGHT_OUT * DEPTH_IN;
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Generated functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_MC_LAYER_TRIVIAL(Upscale2, SZ_OUT, this->OutTrans, this->Gradient)

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute. Optimized for sequential access.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_EXE final
		{
			auto LnIn = this->Input;
			auto LnOut = this->OutTrans;
			for(auto d = u64(0); d < DEPTH_IN; ++d) { for(auto iy = uMAX(0); iy < HEIGHT_IN; ++iy)
			{
				for(auto ix = uMAX(0); ix < WIDTH_IN; ++ix) { *LnOut = *LnIn; *(LnOut+1) = *LnIn; LnIn += 1; LnOut += 2; }
				LnIn -= WIDTH_IN;
				for(auto ix = uMAX(0); ix < WIDTH_IN; ++ix) { *LnOut = *LnIn; *(LnOut+1) = *LnIn; LnIn += 1; LnOut += 2; }
			}}


			SX_MC_LAYER_NEXT_EXE;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Backpropagate. Optimized for sequential access.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		SX_FNSIG_LAYER_FIT final
		{
			memZero(SZ_IN, this->Gradient);


			auto LnInGrad = this->Front->gradient();
			auto LnOutGrad = this->Gradient;
			for(auto d = uMAX(0); d < DEPTH_IN; ++d) { for(auto iy = uMAX(0); iy < HEIGHT_IN; ++iy)
			{
				for(auto ix = uMAX(0); ix < WIDTH_IN; ++ix) { *LnOutGrad += *LnInGrad; *LnOutGrad += *(LnInGrad+1); LnOutGrad += 1; LnInGrad += 2; }
				LnOutGrad -= WIDTH_IN;
				for(auto ix = uMAX(0); ix < WIDTH_IN; ++ix) { *LnOutGrad += *LnInGrad; *LnOutGrad += *(LnInGrad+1); LnOutGrad += 1; LnInGrad += 2; }
			}}


			SX_MC_LAYER_NEXT_FIT;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Multi threading utility.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		#include "./data/ComImplExchangeSkip.hpp"
	};
}
