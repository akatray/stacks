// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <fx/Types.hpp>
#include <fx/Utilities.hpp>
#include <iostream>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Stacks namespace.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Operation flags.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr auto OpFlagTraitUtl = u32(0b00000000000000000000000000000001); // Utlility opration.
	constexpr auto OpFlagTraitReal = u32(0b00000000000000000000000000000010); // Real operation that does work.
	constexpr auto OpFlagCustomId = u32(0xA0000000); // Id for custom operation.
	constexpr auto OpFlagNullId = u32(0x00000000);
	constexpr auto OpFlagNullVer = u32(0x00000200);

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Stack operation interface.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Op
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		protected:
		
		Op* Last;
		Op* Next;
		const utl::Shape ShpIn;
		const utl::Shape ShpOut;
		const r32* Input;

		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Op ( void ) : Next(nullptr), Last(nullptr), ShpIn(), ShpOut(), Input(nullptr) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Op ( const utl::Shape& _ShpIn, const utl::Shape& _ShpOut ) : Last(nullptr), Next(nullptr), ShpIn(_ShpIn), ShpOut(_ShpOut), Input(nullptr) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Virtual destructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual ~Op ( void ) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Trivial Set/Get functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto flags ( void ) const -> u32 { return (OpFlagNullId | OpFlagNullVer | OpFlagTraitUtl); }
		constexpr inline auto shpin ( void ) const -> const utl::Shape& { return this->ShpIn; }
		constexpr inline auto shpout ( void ) const -> const utl::Shape& { return this->ShpOut; }
		inline auto input ( void ) const -> const r32* { return this->Input; }
		virtual auto output ( void ) -> r32* { return nullptr; }
		virtual auto gradient ( void ) const -> const r32* { return nullptr; }
		virtual auto setLast ( Op* _Last ) -> void { this->Last = _Last; if(_Last) { this->Input = _Last->output(); _Last->setNext(this); } }
		virtual auto setNext ( Op* _Next ) -> void { this->Next = _Next; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute stack for input. Returns pointer to output buffer. Buffer belongs to last operation.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto execute ( const r32* _Input ) -> r32* { return nullptr; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Setup stack for fit().
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto reset ( void ) -> void { return; }
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Back propagate target through stack. Needs to have input executed first.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto fit ( const r32* _Target, const u64 _Depth = 0 ) -> void { return; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Apply deltas generated by fit() to stack.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto apply ( const r32 _Rate = 0.01f ) -> void { return; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Store stack's weights.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto store ( std::ostream& _Stream ) const -> void { return; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Load stack's weights.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto load ( std::istream& _Stream ) -> void { return; }
	};
}