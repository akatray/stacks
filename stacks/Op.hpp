// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <fx/Types.hpp>
#include <fx/Math.hpp>
#include <iostream>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Stacks.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Operation identifiers.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	enum class OpId
	{
		NONE,
		DENSE
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Stack operation interface.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Op
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		protected:
		
		Op* Last;
		Op* Next;
		const math::Shape ShpIn;
		const math::Shape ShpOut;
		const r32* Input;
		r32* Output;

		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Op ( void ) : Next(nullptr), Last(nullptr), ShpIn(), ShpOut(), Input(nullptr), Output(nullptr) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Op ( const math::Shape& _ShpIn, const math::Shape& _ShpOut ) : Last(nullptr), Next(nullptr), ShpIn(_ShpIn), ShpOut(_ShpOut), Input(nullptr), Output(nullptr) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Virtual destructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual ~Op ( void ) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Trivial Set/Get functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr inline auto shpin ( void ) const -> const math::Shape& { return this->ShpIn; }
		constexpr inline auto shpout ( void ) const -> const math::Shape& { return this->ShpOut; }
		inline auto input ( void ) const -> const r32* { return this->Input; }
		inline auto output ( void ) const -> r32* { return this->Output; }
		inline auto setLast ( Op* _Last ) -> void { this->Last = _Last; }
		inline auto setNext ( Op* _Next ) -> void { this->Next = _Next; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Identify operation.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto id ( void ) const -> OpId { return OpId::NONE; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute stack for input. Returns pointer to output buffer. Buffer belongs to last operation.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto execute ( const r32* _Input ) -> r32* { return nullptr; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Setup stack for fit().
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto reset ( void ) -> void { return; }
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Back propagate target through stack. Needs to have input executed first.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto fit ( const r32* _Target, const u64 _Depth = 0 ) -> void { return; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Apply deltas generated by fit() to stack.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto apply ( const r32 _Rate = 0.01f ) -> void { return; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Store stack's weights.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto store ( std::ostream& _Stream ) const -> void { return; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Load stack's weights.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		virtual auto load ( std::istream& _Stream ) -> void { return; }
	};
}