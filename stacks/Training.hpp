// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./Op.hpp"
#include <fx/Types.hpp>
#include <vector>
#include <fstream>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Stacks namespace.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Operations stack. Deletes given operations on destruction.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Stack
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		std::vector<Op*> Ops;
		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Destructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		~Stack ( void ) { for(auto o : this->Ops) delete o; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Trivial fuctions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto front ( void ) -> Op* { return this->Ops.front(); }
		auto back ( void ) -> Op* { return this->Ops.back(); }
		auto isolate ( void ) -> void { this->front()->setBack(nullptr); this->back()->setFront(nullptr); }
		auto push ( Op* _Op ) -> void { if(this->Ops.size() != 0) _Op->setBack(this->Ops.back()); this->Ops.push_back(_Op); }
		auto lock (void) -> void { for(auto o : this->Ops) o->lock(); }
		auto unlock (void) -> void { for(auto o : this->Ops) o->unlock(); }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Execute stack.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto exe ( const r32* _Input ) -> r32*
		{
			this->isolate();
			return this->front()->execute(_Input);
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Reset, fit and apply stack.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto fitFull ( const r32* _Target, const r32 _Rate = 0.01f ) -> void
		{
			this->isolate();

			this->front()->reset();
			this->back()->fit(_Target);
			this->front()->apply(_Rate);
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Store stack to file.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto storeToFile ( const std::string& _Filename ) -> void
		{
			this->isolate();

			auto File = std::ofstream(_Filename, std::ios::binary);
			if(File.is_open()) this->front()->store(File);
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Load stack from file.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto loadFromFile ( const std::string& _Filename ) -> void
		{
			this->isolate();

			auto File = std::ifstream(_Filename, std::ios::binary);
			if(File.is_open()) this->front()->load(File);
		}
	};

	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Stacks chain. Doesn't manage stacks lifetime.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Mountain
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		std::vector<Stack*> Towers;
		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Trivial fuctions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto front ( void ) -> Stack* { return Towers.front(); }
		auto back ( void ) -> Stack* { return Towers.back(); }
		auto opBeg ( void ) -> Op* { return this->front()->front(); }
		auto opEnd ( void ) -> Op* { auto End = Towers.back()->back(); while(true){ if(End->front()) End = End->front(); else return End; } }
		auto push ( Stack* _Unit ) -> void { this->Towers.push_back(_Unit); }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Isolate member stacks and then chains them front to back.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto connect ( void ) -> void
		{
			for(auto u : this->Towers) u->isolate();
			for(auto u = u64(0); u < this->Towers.size(); ++u) if(u != 0) this->Towers[u]->front()->setBack(this->Towers[u-1]->back());
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// 
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto exe ( const r32* _Input ) -> r32*
		{
			this->connect();
			return this->opBeg()->execute(_Input);
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// 
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto fitFull ( const r32* _Target, const r32 _Rate = 0.01f ) -> void
		{
			this->connect();

			this->opBeg()->reset();
			this->opEnd()->fit(_Target);
			this->opBeg()->apply(_Rate);
		}
	};
}
