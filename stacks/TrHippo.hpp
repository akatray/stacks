// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./Op.hpp"
#include <fx/Types.hpp>
#include <fx/Math.hpp>
#include <fx/Buffer.hpp>
#include <fx/Simd.hpp>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Stacks.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace sx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Expand namespaces.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	using namespace fx;

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Epoch stats.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	struct HippoStats
	{
		u64 Skipped;
		r32 ErrMin;
		r32 ErrMax;
		r32 ErrAvg;

		HippoStats ( void ) : Skipped(0), ErrMin(1337.0f), ErrMax(0.0f), ErrAvg(0.0f) {}
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Hippo's feeding stratagy.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	enum class HippoFeedMode
	{
		FULL, // Fit all samples then apply.
		BATCH, // Fit batch worth of samples then apply.
		SINGLE // Fit sample and apply.
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Stack trainer.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class TrHippo
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Op* First;
		Op* Last;
		std::vector<r32*>* Inputs;
		std::vector<r32*>* Outputs;
		HippoFeedMode FeedMode;
		r32 Rate;
		u64 BatchSize;
		r32 SkipThreshold;
		public:
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		TrHippo ( void ) :
			First(nullptr),
			Last(nullptr),
			Inputs(nullptr),
			Outputs(nullptr),
			FeedMode(HippoFeedMode::FULL),
			Rate(0.01f),
			BatchSize(4),
			SkipThreshold(0.001f){} // Samples with error less than this will not be fitted.

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		TrHippo ( Op* _First, Op* _Last, std::vector<r32*>* _Inputs, std::vector<r32*>* _Outputs ) : TrHippo()
		{
			this->First = _First;
			this->Last = _Last;
			this->Inputs = _Inputs;
			this->Outputs = _Outputs;
		}
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Trivial Set/Get functions.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline auto setFeedMode ( const HippoFeedMode _FeedMode ) -> void { this->FeedMode = _FeedMode; }
		inline auto setRate ( const r32 _Rate ) -> void { this->Rate = _Rate; }
		inline auto setBatchSize ( const u64 _BatchSize ) -> void { this->BatchSize = _BatchSize; }
		inline auto setSkipThreshold ( const r32 _SkipThreshold ) -> void { this->SkipThreshold = _SkipThreshold; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Fit all samples once.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto trainEpoch ( void ) -> HippoStats
		{
			if(this->Inputs->size() == this->Outputs->size())
			{
				auto Stats = HippoStats();
				auto SamplesFeeded = u64(0);

				for(auto s = u64(0); s < this->Inputs->size(); ++s)
				{
					auto Result = this->First->execute((*this->Inputs)[s]);
					auto Error = math::mse<r32>(this->Last->shpout().size(), Result, (*this->Outputs)[s]);

					if(Stats.ErrMin > Error) Stats.ErrMin = Error;
					if(Stats.ErrMax < Error) Stats.ErrMax = Error;
					Stats.ErrAvg += Error;

					if(this->SkipThreshold < Error)
					{
						if(this->FeedMode == HippoFeedMode::SINGLE) this->First->reset();;
						this->Last->fit((*this->Outputs)[s]);
						if(this->FeedMode == HippoFeedMode::SINGLE) this->First->apply(this->Rate);
						
						++SamplesFeeded;
					}

					else ++Stats.Skipped;

					if(this->FeedMode == HippoFeedMode::BATCH)
					{
						if((s == (this->Inputs->size() - 1)) && (SamplesFeeded < this->BatchSize))
						{
							this->First->apply(this->Rate);
						}
						
						if(SamplesFeeded == this->BatchSize)
						{
							this->First->apply(this->Rate);
							this->First->reset();
							SamplesFeeded = 0;
						}
					}
				}

				if(this->FeedMode == HippoFeedMode::FULL) this->First->apply(this->Rate);

				Stats.ErrAvg /= this->Inputs->size();

				return Stats;
			}
		}
	};
}
